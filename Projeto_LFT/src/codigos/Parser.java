
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 04 18:40:04 GMT-03:00 2017
//----------------------------------------------------

package codigos;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import codigos.Lexico_Para_Sintatico_Projeto;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 04 18:40:04 GMT-03:00 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\003\000\002\002\004\000\002\002\004\000\002" +
    "\003\005\000\002\003\005\000\002\003\003\000\002\004" +
    "\005\000\002\004\005\000\002\004\003\000\002\004\005" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\005\000\002\006\003\000\002\006\003\000\002" +
    "\040\005\000\002\040\003\000\002\040\006\000\002\041" +
    "\005\000\002\041\005\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\016" +
    "\005\000\002\016\005\000\002\045\003\000\002\045\003" +
    "\000\002\007\006\000\002\007\005\000\002\007\003\000" +
    "\002\007\004\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\011\003\000\002\011\005\000\002\011" +
    "\005\000\002\012\003\000\002\012\003\000\002\012\005" +
    "\000\002\012\005\000\002\013\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\013\005\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\023\007\000\002\023\011\000\002\024\005\000\002" +
    "\024\002\000\002\035\007\000\002\035\011\000\002\036" +
    "\005\000\002\036\003\000\002\037\007\000\002\037\011" +
    "\000\002\037\002\000\002\033\010\000\002\033\010\000" +
    "\002\034\006\000\002\034\010\000\002\034\012\000\002" +
    "\017\007\000\002\020\005\000\002\021\003\000\002\021" +
    "\005\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\025\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\002\000\002\027\004\000\002\030\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\002\000\002\032\004\000\002\044\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\042\002\uff87\006\017\011\011\012\037\015" +
    "\023\016\016\020\032\021\030\024\014\041\031\053\027" +
    "\054\007\055\020\056\025\057\040\060\026\001\002\000" +
    "\004\005\362\001\002\000\004\005\360\001\002\000\004" +
    "\005\356\001\002\000\052\005\uffea\025\uffea\026\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\042\uffea\043\uffea\045\uffea\046\uffea\047" +
    "\uffea\050\uffea\051\uffea\061\uffea\001\002\000\004\005\354" +
    "\001\002\000\022\015\023\016\016\024\014\041\337\053" +
    "\027\054\007\055\110\056\025\001\002\000\050\005\uffed" +
    "\025\uffed\026\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\042\uffed\043\uffed" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\001\002\000" +
    "\004\002\336\001\002\000\004\041\333\001\002\000\004" +
    "\005\331\001\002\000\050\005\uffd5\025\uffd5\026\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\042\uffd5\043\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\001\002\000\022\015\023\016\016" +
    "\024\014\041\277\053\027\054\007\055\110\056\025\001" +
    "\002\000\036\005\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\044\273\045\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\274\001\002\000\022\005\uffe7\025\270" +
    "\026\263\030\267\031\265\032\266\042\uffe7\043\uffe7\001" +
    "\002\000\004\005\261\001\002\000\050\005\uffd6\025\uffd6" +
    "\026\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\042\uffd6\043\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\001\002\000\004\005" +
    "\257\001\002\000\016\040\075\045\076\046\102\047\105" +
    "\050\101\051\103\001\002\000\052\002\uff87\004\uff87\005" +
    "\uff87\006\017\007\uff87\010\uff87\011\011\012\037\015\023" +
    "\016\016\020\032\021\030\024\014\041\031\053\027\054" +
    "\007\055\020\056\025\057\040\060\026\001\002\000\052" +
    "\005\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9" +
    "\043\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\061" +
    "\uffe9\001\002\000\004\055\226\001\002\000\016\015\023" +
    "\016\016\041\031\053\027\054\007\055\110\001\002\000" +
    "\020\005\uffd2\017\124\041\125\053\126\054\130\055\121" +
    "\056\123\001\002\000\050\005\ufff0\025\ufff0\026\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\042\ufff0\043\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\001\002\000\050\005\ufff3\025\ufff3" +
    "\026\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\113\036\114\037\112\040\ufff3\042\ufff3\043\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\050\ufff3\051\ufff3\001\002\000\024\005" +
    "\104\033\074\034\077\040\075\045\076\046\102\047\105" +
    "\050\101\051\103\001\002\000\014\002\ufff8\004\ufff8\005" +
    "\ufff8\007\ufff8\010\ufff8\001\002\000\004\055\043\001\002" +
    "\000\052\002\uff87\004\uff87\005\uff87\006\017\007\uff87\010" +
    "\uff87\011\011\012\037\015\023\016\016\020\032\021\030" +
    "\024\014\041\031\053\027\054\007\055\020\056\025\057" +
    "\040\060\026\001\002\000\050\005\uffec\025\uffec\026\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\042\uffec\043\uffec\045\uffec\046\uffec" +
    "\047\uffec\050\uffec\051\uffec\001\002\000\014\002\ufff7\004" +
    "\ufff7\005\ufff7\007\ufff7\010\ufff7\001\002\000\004\027\044" +
    "\001\002\000\006\014\047\055\045\001\002\000\004\043" +
    "\072\001\002\000\004\043\061\001\002\000\004\041\050" +
    "\001\002\000\004\054\051\001\002\000\006\042\052\061" +
    "\053\001\002\000\004\043\uff9d\001\002\000\004\054\054" +
    "\001\002\000\006\042\055\061\056\001\002\000\004\043" +
    "\uff9c\001\002\000\004\054\057\001\002\000\004\042\060" +
    "\001\002\000\004\043\uff9b\001\002\000\004\005\063\001" +
    "\002\000\004\005\uff9f\001\002\000\012\004\065\005\uff90" +
    "\007\uff90\010\uff90\001\002\000\010\005\uff93\007\uff93\010" +
    "\uff93\001\002\000\052\004\uff87\005\uff87\006\017\007\uff87" +
    "\010\uff87\011\011\012\037\013\067\015\023\016\016\020" +
    "\032\021\030\024\014\041\031\053\027\054\007\055\020" +
    "\056\025\057\040\060\026\001\002\000\012\004\065\005" +
    "\uff90\007\uff90\010\uff90\001\002\000\010\005\uff91\007\uff91" +
    "\010\uff91\001\002\000\010\005\uff92\007\uff92\010\uff92\001" +
    "\002\000\010\005\uff8f\007\uff8f\010\uff8f\001\002\000\004" +
    "\005\063\001\002\000\004\005\uff9e\001\002\000\016\015" +
    "\023\016\016\041\031\053\027\054\007\055\110\001\002" +
    "\000\020\015\uffe3\016\uffe3\041\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\001\002\000\020\015\uffe2\016\uffe2\041\uffe2" +
    "\053\uffe2\054\uffe2\055\uffe2\056\uffe2\001\002\000\016\015" +
    "\023\016\016\041\031\053\027\054\007\055\110\001\002" +
    "\000\016\015\023\016\016\041\031\053\027\054\007\055" +
    "\110\001\002\000\020\015\uffdf\016\uffdf\041\uffdf\053\uffdf" +
    "\054\uffdf\055\uffdf\056\uffdf\001\002\000\020\015\uffe1\016" +
    "\uffe1\041\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\001\002" +
    "\000\020\015\uffde\016\uffde\041\uffde\053\uffde\054\uffde\055" +
    "\uffde\056\uffde\001\002\000\052\002\uff87\004\uff87\005\uff87" +
    "\006\017\007\uff87\010\uff87\011\011\012\037\015\023\016" +
    "\016\020\032\021\030\024\014\041\031\053\027\054\007" +
    "\055\020\056\025\057\040\060\026\001\002\000\020\015" +
    "\uffe0\016\uffe0\041\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\001\002\000\014\002\ufffc\004\ufffc\005\ufffc\007\ufffc\010" +
    "\ufffc\001\002\000\026\005\uffe5\025\uffe5\026\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\074\034\077\042\uffe5\043\uffe5\001" +
    "\002\000\050\005\uffee\025\uffee\026\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\042\uffee\043\uffee\045\uffee\046\uffee\047\uffee\050\uffee" +
    "\051\uffee\001\002\000\050\005\ufff4\025\ufff4\026\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\113\036\114" +
    "\037\112\040\ufff4\042\ufff4\043\ufff4\045\ufff4\046\ufff4\047" +
    "\ufff4\050\ufff4\051\ufff4\001\002\000\016\015\023\016\016" +
    "\041\031\053\027\054\007\055\110\001\002\000\016\015" +
    "\023\016\016\041\031\053\027\054\007\055\110\001\002" +
    "\000\016\015\023\016\016\041\031\053\027\054\007\055" +
    "\110\001\002\000\050\005\ufff1\025\ufff1\026\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\042\ufff1\043\ufff1\045\ufff1\046\ufff1\047\ufff1" +
    "\050\ufff1\051\ufff1\001\002\000\050\005\ufff2\025\ufff2\026" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\042\ufff2\043\ufff2\045\ufff2\046" +
    "\ufff2\047\ufff2\050\ufff2\051\ufff2\001\002\000\050\005\uffef" +
    "\025\uffef\026\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\042\uffef\043\uffef" +
    "\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\001\002\000" +
    "\050\005\ufff5\025\ufff5\026\ufff5\030\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\035\113\036\114\037\112\040\ufff5\042" +
    "\ufff5\043\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\001\002\000\020\005\uffcf\033\212\035\214\036\215\037" +
    "\213\042\uffcf\061\216\001\002\000\020\005\uffce\033\202" +
    "\034\206\036\205\037\203\042\uffce\061\207\001\002\000" +
    "\014\005\uffd0\033\161\035\162\042\uffd0\061\163\001\002" +
    "\000\004\041\157\001\002\000\016\017\124\042\154\053" +
    "\126\054\130\055\121\056\123\001\002\000\022\005\uffe9" +
    "\033\uffe9\034\uffe9\035\133\036\uffe9\037\uffe9\042\uffe9\061" +
    "\uffe9\001\002\000\004\005\uffd1\001\002\000\022\005\uffea" +
    "\033\uffea\034\uffea\035\131\036\uffea\037\uffea\042\uffea\061" +
    "\uffea\001\002\000\014\017\124\053\126\054\130\055\121" +
    "\056\123\001\002\000\006\005\uffc7\042\uffc7\001\002\000" +
    "\010\053\027\054\007\055\134\001\002\000\022\005\uffb5" +
    "\033\137\034\143\035\141\036\142\037\140\042\uffb5\061" +
    "\151\001\002\000\022\005\uffb9\033\137\034\143\035\141" +
    "\036\142\037\140\042\uffb9\061\145\001\002\000\006\005" +
    "\uffc4\042\uffc4\001\002\000\010\053\uffaf\054\uffaf\055\uffaf" +
    "\001\002\000\010\053\uffac\054\uffac\055\uffac\001\002\000" +
    "\010\053\uffad\054\uffad\055\uffad\001\002\000\010\053\uffab" +
    "\054\uffab\055\uffab\001\002\000\010\053\uffae\054\uffae\055" +
    "\uffae\001\002\000\010\053\027\054\007\055\134\001\002" +
    "\000\014\017\124\053\126\054\130\055\121\056\123\001" +
    "\002\000\006\005\uffb7\042\uffb7\001\002\000\006\005\uffb8" +
    "\042\uffb8\001\002\000\010\053\027\054\007\055\134\001" +
    "\002\000\014\017\124\053\126\054\130\055\121\056\123" +
    "\001\002\000\006\005\uffb4\042\uffb4\001\002\000\006\005" +
    "\uffb6\042\uffb6\001\002\000\004\005\uffd3\001\002\000\004" +
    "\042\156\001\002\000\004\005\uffd4\001\002\000\004\042" +
    "\160\001\002\000\006\005\uffcd\042\uffcd\001\002\000\006" +
    "\055\173\056\174\001\002\000\004\054\166\001\002\000" +
    "\014\017\124\053\126\054\130\055\121\056\123\001\002" +
    "\000\006\005\uffc9\042\uffc9\001\002\000\006\005\uffca\042" +
    "\uffca\001\002\000\012\005\uffc0\035\167\042\uffc0\061\170" +
    "\001\002\000\004\054\166\001\002\000\014\017\124\053" +
    "\126\054\130\055\121\056\123\001\002\000\006\005\uffbe" +
    "\042\uffbe\001\002\000\006\005\uffbf\042\uffbf\001\002\000" +
    "\006\005\uffbc\042\uffbc\001\002\000\012\005\uffbd\033\176" +
    "\042\uffbd\061\177\001\002\000\006\005\uffc8\042\uffc8\001" +
    "\002\000\006\055\173\056\174\001\002\000\014\017\124" +
    "\053\126\054\130\055\121\056\123\001\002\000\006\005" +
    "\uffba\042\uffba\001\002\000\006\005\uffbb\042\uffbb\001\002" +
    "\000\010\053\uffb3\054\uffb3\055\uffb3\001\002\000\010\053" +
    "\uffb1\054\uffb1\055\uffb1\001\002\000\010\053\027\054\007" +
    "\055\134\001\002\000\010\053\uffb0\054\uffb0\055\uffb0\001" +
    "\002\000\010\053\uffb2\054\uffb2\055\uffb2\001\002\000\014" +
    "\017\124\053\126\054\130\055\121\056\123\001\002\000" +
    "\006\005\uffc6\042\uffc6\001\002\000\006\005\uffc5\042\uffc5" +
    "\001\002\000\014\017\124\053\126\054\130\055\121\056" +
    "\123\001\002\000\010\053\027\054\007\055\134\001\002" +
    "\000\010\053\027\054\007\055\134\001\002\000\010\053" +
    "\027\054\007\055\134\001\002\000\014\017\124\053\126" +
    "\054\130\055\121\056\123\001\002\000\006\005\uffcb\042" +
    "\uffcb\001\002\000\006\005\uffc2\042\uffc2\001\002\000\006" +
    "\005\uffc3\042\uffc3\001\002\000\006\005\uffc1\042\uffc1\001" +
    "\002\000\006\005\uffcc\042\uffcc\001\002\000\010\033\074" +
    "\034\077\042\225\001\002\000\050\005\uffeb\025\uffeb\026" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\001\002\000\004\041\230" +
    "\001\002\000\004\043\241\001\002\000\012\053\027\054" +
    "\007\055\232\056\235\001\002\000\004\042\240\001\002" +
    "\000\006\042\uff96\061\uff96\001\002\000\006\042\uff98\061" +
    "\236\001\002\000\006\042\uff94\061\uff94\001\002\000\006" +
    "\042\uff95\061\uff95\001\002\000\012\053\027\054\007\055" +
    "\232\056\235\001\002\000\004\042\uff97\001\002\000\004" +
    "\043\uff99\001\002\000\004\005\243\001\002\000\004\005" +
    "\uff9a\001\002\000\006\004\245\005\uff89\001\002\000\004" +
    "\005\uff8e\001\002\000\052\004\uff87\005\uff87\006\017\011" +
    "\011\012\037\013\251\015\023\016\016\020\032\021\030" +
    "\022\247\023\250\024\014\041\031\053\027\054\007\055" +
    "\020\056\025\057\040\060\026\001\002\000\006\004\245" +
    "\005\uff89\001\002\000\004\005\uff8b\001\002\000\004\005" +
    "\uff8a\001\002\000\004\005\uff8c\001\002\000\004\005\uff8d" +
    "\001\002\000\004\005\uff88\001\002\000\014\002\ufff6\004" +
    "\ufff6\005\ufff6\007\ufff6\010\ufff6\001\002\000\004\056\256" +
    "\001\002\000\022\005\uffe4\025\uffe4\026\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\042\uffe4\043\uffe4\001\002\000\052\002\uff87" +
    "\004\uff87\005\uff87\006\017\007\uff87\010\uff87\011\011\012" +
    "\037\015\023\016\016\020\032\021\030\024\014\041\031" +
    "\053\027\054\007\055\020\056\025\057\040\060\026\001" +
    "\002\000\014\002\ufffb\004\ufffb\005\ufffb\007\ufffb\010\ufffb" +
    "\001\002\000\052\002\uff87\004\uff87\005\uff87\006\017\007" +
    "\uff87\010\uff87\011\011\012\037\015\023\016\016\020\032" +
    "\021\030\024\014\041\031\053\027\054\007\055\020\056" +
    "\025\057\040\060\026\001\002\000\014\002\ufff9\004\ufff9" +
    "\005\ufff9\007\ufff9\010\ufff9\001\002\000\020\015\uffdd\016" +
    "\uffdd\041\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\001\002" +
    "\000\020\015\023\016\016\041\031\053\027\054\007\055" +
    "\110\056\025\001\002\000\020\015\uffda\016\uffda\041\uffda" +
    "\053\uffda\054\uffda\055\uffda\056\uffda\001\002\000\020\015" +
    "\uffd9\016\uffd9\041\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\001\002\000\020\015\uffdb\016\uffdb\041\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\001\002\000\020\015\uffdc\016\uffdc" +
    "\041\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\001\002\000" +
    "\022\033\074\034\077\040\075\045\076\046\102\047\105" +
    "\050\101\051\103\001\002\000\010\005\uffe8\042\uffe8\043" +
    "\uffe8\001\002\000\014\017\124\053\126\054\130\055\121" +
    "\056\123\001\002\000\014\017\124\053\126\054\130\055" +
    "\121\056\123\001\002\000\004\005\uffd7\001\002\000\004" +
    "\005\uffd8\001\002\000\022\015\023\016\016\024\014\041" +
    "\031\053\027\054\007\055\110\056\025\001\002\000\004" +
    "\043\301\001\002\000\004\005\063\001\002\000\010\005" +
    "\uffa0\007\305\010\303\001\002\000\004\043\322\001\002" +
    "\000\004\005\uffa3\001\002\000\022\015\023\016\016\024" +
    "\014\041\307\053\027\054\007\055\110\056\025\001\002" +
    "\000\004\005\uffa6\001\002\000\022\015\023\016\016\024" +
    "\014\041\031\053\027\054\007\055\110\056\025\001\002" +
    "\000\004\043\311\001\002\000\004\005\063\001\002\000" +
    "\006\005\uffa0\007\305\001\002\000\004\005\uffa2\001\002" +
    "\000\024\033\074\034\077\040\075\042\225\045\076\046" +
    "\102\047\105\050\101\051\103\001\002\000\004\042\316" +
    "\001\002\000\004\043\317\001\002\000\004\005\063\001" +
    "\002\000\006\005\uffa0\007\305\001\002\000\004\005\uffa1" +
    "\001\002\000\004\005\063\001\002\000\004\005\uffa4\001" +
    "\002\000\004\042\325\001\002\000\004\043\326\001\002" +
    "\000\004\005\063\001\002\000\010\005\uffa0\007\305\010" +
    "\303\001\002\000\004\005\uffa5\001\002\000\052\002\uff87" +
    "\004\uff87\005\uff87\006\017\007\uff87\010\uff87\011\011\012" +
    "\037\015\023\016\016\020\032\021\030\024\014\041\031" +
    "\053\027\054\007\055\020\056\025\057\040\060\026\001" +
    "\002\000\014\002\ufffd\004\ufffd\005\ufffd\007\ufffd\010\ufffd" +
    "\001\002\000\020\015\023\016\016\041\031\053\027\054" +
    "\007\055\110\056\025\001\002\000\004\042\335\001\002" +
    "\000\010\005\uffe6\042\uffe6\043\uffe6\001\002\000\004\002" +
    "\001\001\002\000\022\015\023\016\016\024\014\041\031" +
    "\053\027\054\007\055\110\056\025\001\002\000\004\043" +
    "\341\001\002\000\004\005\063\001\002\000\006\005\uffa7" +
    "\010\343\001\002\000\004\043\345\001\002\000\004\005" +
    "\uffaa\001\002\000\004\005\063\001\002\000\004\005\uffa8" +
    "\001\002\000\004\042\350\001\002\000\004\043\351\001" +
    "\002\000\004\005\063\001\002\000\006\005\uffa7\010\343" +
    "\001\002\000\004\005\uffa9\001\002\000\052\002\uff87\004" +
    "\uff87\005\uff87\006\017\007\uff87\010\uff87\011\011\012\037" +
    "\015\023\016\016\020\032\021\030\024\014\041\031\053" +
    "\027\054\007\055\020\056\025\057\040\060\026\001\002" +
    "\000\014\002\uffff\004\uffff\005\uffff\007\uffff\010\uffff\001" +
    "\002\000\052\002\uff87\004\uff87\005\uff87\006\017\007\uff87" +
    "\010\uff87\011\011\012\037\015\023\016\016\020\032\021" +
    "\030\024\014\041\031\053\027\054\007\055\020\056\025" +
    "\057\040\060\026\001\002\000\014\002\ufffe\004\ufffe\005" +
    "\ufffe\007\ufffe\010\ufffe\001\002\000\052\002\uff87\004\uff87" +
    "\005\uff87\006\017\007\uff87\010\uff87\011\011\012\037\015" +
    "\023\016\016\020\032\021\030\024\014\041\031\053\027" +
    "\054\007\055\020\056\025\057\040\060\026\001\002\000" +
    "\014\002\000\004\000\005\000\007\000\010\000\001\002" +
    "\000\052\002\uff87\004\uff87\005\uff87\006\017\007\uff87\010" +
    "\uff87\011\011\012\037\015\023\016\016\020\032\021\030" +
    "\024\014\041\031\053\027\054\007\055\020\056\025\057" +
    "\040\060\026\001\002\000\014\002\ufffa\004\ufffa\005\ufffa" +
    "\007\ufffa\010\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\040\002\012\003\034\004\033\005\032\006" +
    "\011\007\004\016\007\017\005\023\014\033\023\035\003" +
    "\040\021\041\020\044\035\045\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\270\004\033\005\032\006" +
    "\011\040\337\041\020\045\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\270\004\033\005\032\006\011" +
    "\040\277\041\020\045\040\001\001\000\002\001\001\000" +
    "\004\043\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\254\001\001\000\040\002" +
    "\253\003\034\004\033\005\032\006\011\007\004\016\007" +
    "\017\005\023\014\033\023\035\003\040\021\041\020\044" +
    "\035\045\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\223\004\033\005\032\006\011\045\040\001" +
    "\001\000\006\006\121\010\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\002\041\003\034\004\033" +
    "\005\032\006\011\007\004\016\007\017\005\023\014\033" +
    "\023\035\003\040\021\041\020\044\035\045\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\061\001\001\000\002\001\001\000\004" +
    "\026\063\001\001\000\002\001\001\000\042\002\065\003" +
    "\034\004\033\005\032\006\011\007\004\016\007\017\005" +
    "\023\014\027\067\033\023\035\003\040\021\041\020\044" +
    "\035\045\040\001\001\000\004\026\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\072\001\001\000\002\001\001\000\012\004\117\005\032" +
    "\006\011\045\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\110\005\032\006\011\045\040\001\001" +
    "\000\014\003\106\004\033\005\032\006\011\045\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\002\105\003\034\004\033\005\032\006\011\007" +
    "\004\016\007\017\005\023\014\033\023\035\003\040\021" +
    "\041\020\044\035\045\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\116\006\011\045\040\001\001\000" +
    "\010\005\115\006\011\045\040\001\001\000\010\005\114" +
    "\006\011\045\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\121\010\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\121\010" +
    "\131\001\001\000\002\001\001\000\006\006\134\013\135" +
    "\001\001\000\004\014\147\001\001\000\004\014\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\134\013\146\001\001\000\006\006\121\010\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\134\013\152\001\001\000\006\006\121\010\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\174\001\001\000\004\011\164\001" +
    "\001\000\006\006\121\010\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\171\001" +
    "\001\000\006\006\121\010\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\200\001\001\000\006\006\121" +
    "\010\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\134\013\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\121\010\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\121\010\222\001\001\000\006\006\134\013" +
    "\221\001\001\000\006\006\134\013\220\001\001\000\006" +
    "\006\134\013\217\001\001\000\006\006\121\010\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\226\001\001\000\002\001\001" +
    "\000\010\006\233\021\230\022\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\233\021\236\022\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\241" +
    "\001\001\000\002\001\001\000\004\031\243\001\001\000" +
    "\002\001\001\000\042\002\245\003\034\004\033\005\032" +
    "\006\011\007\004\016\007\017\005\023\014\032\251\033" +
    "\023\035\003\040\021\041\020\044\035\045\040\001\001" +
    "\000\004\031\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\002\257\003\034\004\033\005\032\006\011\007\004" +
    "\016\007\017\005\023\014\033\023\035\003\040\021\041" +
    "\020\044\035\045\040\001\001\000\002\001\001\000\040" +
    "\002\261\003\034\004\033\005\032\006\011\007\004\016" +
    "\007\017\005\023\014\033\023\035\003\040\021\041\020" +
    "\044\035\045\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\270\004\033\005\032\006\011\041\271" +
    "\045\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\077\001\001" +
    "\000\002\001\001\000\006\006\121\010\275\001\001\000" +
    "\006\006\121\010\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\313\004\033\005\032\006\011\040" +
    "\323\041\020\045\040\001\001\000\002\001\001\000\004" +
    "\025\301\001\001\000\006\036\305\037\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\270\004\033" +
    "\005\032\006\011\040\307\041\020\045\040\001\001\000" +
    "\002\001\001\000\020\003\313\004\033\005\032\006\011" +
    "\040\314\041\020\045\040\001\001\000\002\001\001\000" +
    "\004\025\311\001\001\000\004\037\312\001\001\000\002" +
    "\001\001\000\004\042\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\317\001\001\000\004\037\320" +
    "\001\001\000\002\001\001\000\004\025\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\326\001\001\000\006\036\327\037\303\001\001\000" +
    "\002\001\001\000\040\002\331\003\034\004\033\005\032" +
    "\006\011\007\004\016\007\017\005\023\014\033\023\035" +
    "\003\040\021\041\020\044\035\045\040\001\001\000\002" +
    "\001\001\000\016\003\270\004\033\005\032\006\011\041" +
    "\333\045\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\313\004\033\005\032\006" +
    "\011\040\346\041\020\045\040\001\001\000\002\001\001" +
    "\000\004\025\341\001\001\000\004\024\343\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\345\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\351\001\001\000\004\024\352\001\001\000\002" +
    "\001\001\000\040\002\354\003\034\004\033\005\032\006" +
    "\011\007\004\016\007\017\005\023\014\033\023\035\003" +
    "\040\021\041\020\044\035\045\040\001\001\000\002\001" +
    "\001\000\040\002\356\003\034\004\033\005\032\006\011" +
    "\007\004\016\007\017\005\023\014\033\023\035\003\040" +
    "\021\041\020\044\035\045\040\001\001\000\002\001\001" +
    "\000\040\002\360\003\034\004\033\005\032\006\011\007" +
    "\004\016\007\017\005\023\014\033\023\035\003\040\021" +
    "\041\020\044\035\045\040\001\001\000\002\001\001\000" +
    "\040\002\362\003\034\004\033\005\032\006\011\007\004" +
    "\016\007\017\005\023\014\033\023\035\003\040\021\041" +
    "\020\044\035\045\040\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;  //s recebe o Symbol da classe Symbol
        
    public void syntax_error(Symbol s){
        this.s = s; //recebe simbolo que deu erro        
    }

    //metodo para pegar o "s"
    public Symbol getS(){
        return this.s;  
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // fim ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fim",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // suite_F ::= inicio_A suite_E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite_F",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // suite_E ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite_E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // suite_E ::= IDENT PASS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite_E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // suite_E ::= IDENT RETORNO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite_E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // suite_E ::= IDENT BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite_E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // suite_E ::= IDENT suite_F 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite_E",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // suite_D ::= NEWLINE suite_E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite_D",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // suite_C ::= inicio_A suite_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite_C",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // suite_B ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite_B",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // suite_B ::= IDENT BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite_B",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // suite_B ::= IDENT suite_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite_B",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // suite_A ::= NEWLINE suite_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite_A",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // def_tudo ::= numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tudo",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // def_tudo ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tudo",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // def_tudo ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_tudo",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // compara ::= def_tudo VIRGULA compara 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compara",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // compara ::= def_tudo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compara",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametros ::= PARESQ compara PARDIR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // funcdef_A ::= DEF ID parametros DOISPONTOS suite_D 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef_A",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // range_A ::= RANGE PARESQ INT VIRGULA INT VIRGULA INT PARDIR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range_A",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // range_A ::= RANGE PARESQ INT VIRGULA INT PARDIR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range_A",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // range_A ::= RANGE PARESQ INT PARDIR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range_A",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // for_A ::= FOR ID IN ID DOISPONTOS suite_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_A",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // for_A ::= FOR ID IN range_A DOISPONTOS suite_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_A",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // if_C ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_C",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // if_C ::= ELIF PARESQ condicional_A PARDIR DOISPONTOS suite_A if_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_C",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // if_C ::= ELIF condicional_A DOISPONTOS suite_A if_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_C",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // if_B ::= if_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_B",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // if_B ::= ELSE DOISPONTOS suite_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_B",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // if_A ::= IF PARESQ condicional_A PARDIR DOISPONTOS suite_A if_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_A",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // if_A ::= IF condicional_A DOISPONTOS suite_A if_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_A",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // while_B ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_B",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // while_B ::= ELSE DOISPONTOS suite_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_B",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // while_A ::= WHILE PARESQ condicional_A PARDIR DOISPONTOS suite_A while_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_A",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // while_A ::= WHILE condicional_A DOISPONTOS suite_A while_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_A",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operadores_mat ::= DIVISAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_mat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operadores_mat ::= PORCENTAGEM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_mat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operadores_mat ::= VEZES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_mat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operadores_mat ::= MENOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_mat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operadores_mat ::= MAIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_mat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadores_mat2 ::= DIVISAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_mat2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadores_mat2 ::= PORCENTAGEM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_mat2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadores_mat2 ::= MENOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_mat2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operadores_mat2 ::= MAIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_mat2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // print_E ::= ID VIRGULA print_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_E",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // print_E ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_E",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // print_E ::= ID operadores_mat print_E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_E",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // print_E ::= numero VIRGULA print_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_E",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // print_E ::= numero operadores_mat print_E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_E",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // print_E ::= numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_E",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // print_D ::= STRING VIRGULA print_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_D",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // print_D ::= STRING MAIS print_D 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_D",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // print_D ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_D",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // print_D ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_D",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // print_C ::= INT VIRGULA print_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_C",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print_C ::= INT VEZES print_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_C",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // print_C ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_C",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // print_B ::= ID PORCENTAGEM print_E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // print_B ::= ID DIVISAO print_E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // print_B ::= ID VEZES print_E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // print_B ::= FLOAT VEZES print_E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // print_B ::= numero operadores_mat2 print_E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // print_B ::= numero VIRGULA print_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // print_B ::= INT VEZES print_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // print_B ::= STRING MAIS print_D 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // print_B ::= STRING VIRGULA print_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // print_B ::= STRING VEZES print_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // print_B ::= ID VIRGULA print_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // print_B ::= ID MAIS print_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // print_B ::= INPUT PARESQ PARDIR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // print_B ::= numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // print_B ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // print_B ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_B",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // print_A ::= PRINT print_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_A",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // print_A ::= PRINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_A",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // print_A ::= PRINT PARESQ PARDIR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_A",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // print_A ::= PRINT PARESQ print_B PARDIR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_A",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // boolean ::= FALSO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atribuicao_A ::= ID CONCATENACAO print_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao_A",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atribuicao_A ::= ID IGUAL print_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao_A",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operadores_logico2 ::= NOTIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_logico2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operadores_logico2 ::= ISNOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_logico2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operadores_logico2 ::= IS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_logico2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operadores_logico2 ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_logico2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operadores_logico2 ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_logico2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operadores_logico ::= MAIORIGUALQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_logico",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operadores_logico ::= MENORIGUALQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_logico",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operadores_logico ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_logico",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operadores_logico ::= MENORQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_logico",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operadores_logico ::= MAIORQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_logico",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operadores_logico ::= DOISIGUAIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadores_logico",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicional_B ::= STRING operadores_logico STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_B",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicional_B ::= operacao_mat_A operadores_logico operacao_mat_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_B",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicional_A ::= NOT PARESQ condicional_B PARDIR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_A",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicional_A ::= condicional_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_A",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condicional_A ::= condicional_B operadores_logico2 condicional_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_A",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // numero ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // numero ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operacao_mat_C ::= PARESQ operacao_mat_A PARDIR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_mat_C",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operacao_mat_C ::= boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_mat_C",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacao_mat_C ::= numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_mat_C",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacao_mat_C ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_mat_C",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacao_mat_B ::= operacao_mat_B PORCENTAGEM operacao_mat_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_mat_B",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacao_mat_B ::= operacao_mat_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_mat_B",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operacao_mat_B ::= operacao_mat_B DIVISAO operacao_mat_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_mat_B",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operacao_mat_B ::= operacao_mat_B VEZES operacao_mat_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_mat_B",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operacao_mat_A ::= operacao_mat_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_mat_A",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operacao_mat_A ::= operacao_mat_A MENOS operacao_mat_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_mat_A",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operacao_mat_A ::= operacao_mat_A MAIS operacao_mat_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacao_mat_A",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio_A ::= COMENTARIOS inicio_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio_A ::= COMENTARIO inicio_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio_A ::= fim 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio_A ::= condicional_A NEWLINE inicio_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio_A ::= if_A NEWLINE inicio_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio_A ::= for_A NEWLINE inicio_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio_A ::= operacao_mat_A NEWLINE inicio_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio_A ::= while_A NEWLINE inicio_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio_A ::= funcdef_A NEWLINE inicio_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio_A ::= atribuicao_A NEWLINE inicio_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio_A ::= print_A NEWLINE inicio_A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio_A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

